
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000902  00000996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000902  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800210  00800210  000009a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d7b  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000277  00000000  00000000  00001841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000093f  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  000023f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000681  00000000  00000000  00002959  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00002fda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e0       	ldi	r30, 0x02	; 2
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 32       	cpi	r26, 0x21	; 33
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	53 d2       	rcall	.+1190   	; 0x5c6 <main>
 120:	ee c3       	rjmp	.+2012   	; 0x8fe <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_port_config>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
	OCR5BL = (unsigned char)right_motor;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	87 6f       	ori	r24, 0xF7	; 247
 128:	87 b9       	out	0x07, r24	; 7
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	88 70       	andi	r24, 0x08	; 8
 12e:	88 b9       	out	0x08, r24	; 8
 130:	08 95       	ret

00000132 <lcd_set_4bit>:
 132:	86 e6       	ldi	r24, 0x66	; 102
 134:	9e e0       	ldi	r25, 0x0E	; 14
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_set_4bit+0x4>
 13a:	00 00       	nop
 13c:	40 98       	cbi	0x08, 0	; 8
 13e:	41 98       	cbi	0x08, 1	; 8
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	88 b9       	out	0x08, r24	; 8
 144:	42 9a       	sbi	0x08, 2	; 8
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	97 e4       	ldi	r25, 0x47	; 71
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_set_4bit+0x18>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_set_4bit+0x1e>
 150:	00 00       	nop
 152:	42 98       	cbi	0x08, 2	; 8
 154:	86 e6       	ldi	r24, 0x66	; 102
 156:	9e e0       	ldi	r25, 0x0E	; 14
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_set_4bit+0x26>
 15c:	00 00       	nop
 15e:	40 98       	cbi	0x08, 0	; 8
 160:	41 98       	cbi	0x08, 1	; 8
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	88 b9       	out	0x08, r24	; 8
 166:	42 9a       	sbi	0x08, 2	; 8
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	97 e4       	ldi	r25, 0x47	; 71
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_set_4bit+0x3a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_set_4bit+0x40>
 172:	00 00       	nop
 174:	42 98       	cbi	0x08, 2	; 8
 176:	86 e6       	ldi	r24, 0x66	; 102
 178:	9e e0       	ldi	r25, 0x0E	; 14
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_set_4bit+0x48>
 17e:	00 00       	nop
 180:	40 98       	cbi	0x08, 0	; 8
 182:	41 98       	cbi	0x08, 1	; 8
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	88 b9       	out	0x08, r24	; 8
 188:	42 9a       	sbi	0x08, 2	; 8
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	97 e4       	ldi	r25, 0x47	; 71
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_set_4bit+0x5c>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_set_4bit+0x62>
 194:	00 00       	nop
 196:	42 98       	cbi	0x08, 2	; 8
 198:	86 e6       	ldi	r24, 0x66	; 102
 19a:	9e e0       	ldi	r25, 0x0E	; 14
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_set_4bit+0x6a>
 1a0:	00 00       	nop
 1a2:	40 98       	cbi	0x08, 0	; 8
 1a4:	41 98       	cbi	0x08, 1	; 8
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	88 b9       	out	0x08, r24	; 8
 1aa:	42 9a       	sbi	0x08, 2	; 8
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	97 e4       	ldi	r25, 0x47	; 71
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x7e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_set_4bit+0x84>
 1b6:	00 00       	nop
 1b8:	42 98       	cbi	0x08, 2	; 8
 1ba:	08 95       	ret

000001bc <lcd_wr_command>:
 1bc:	98 b1       	in	r25, 0x08	; 8
 1be:	9f 70       	andi	r25, 0x0F	; 15
 1c0:	98 b9       	out	0x08, r25	; 8
 1c2:	98 b1       	in	r25, 0x08	; 8
 1c4:	28 2f       	mov	r18, r24
 1c6:	20 7f       	andi	r18, 0xF0	; 240
 1c8:	92 2b       	or	r25, r18
 1ca:	98 b9       	out	0x08, r25	; 8
 1cc:	40 98       	cbi	0x08, 0	; 8
 1ce:	41 98       	cbi	0x08, 1	; 8
 1d0:	42 9a       	sbi	0x08, 2	; 8
 1d2:	ef ef       	ldi	r30, 0xFF	; 255
 1d4:	f7 e4       	ldi	r31, 0x47	; 71
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_wr_command+0x1a>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_wr_command+0x20>
 1dc:	00 00       	nop
 1de:	42 98       	cbi	0x08, 2	; 8
 1e0:	98 b1       	in	r25, 0x08	; 8
 1e2:	9f 70       	andi	r25, 0x0F	; 15
 1e4:	98 b9       	out	0x08, r25	; 8
 1e6:	98 b1       	in	r25, 0x08	; 8
 1e8:	82 95       	swap	r24
 1ea:	80 7f       	andi	r24, 0xF0	; 240
 1ec:	89 2b       	or	r24, r25
 1ee:	88 b9       	out	0x08, r24	; 8
 1f0:	40 98       	cbi	0x08, 0	; 8
 1f2:	41 98       	cbi	0x08, 1	; 8
 1f4:	42 9a       	sbi	0x08, 2	; 8
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	97 e4       	ldi	r25, 0x47	; 71
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_wr_command+0x3e>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_wr_command+0x44>
 200:	00 00       	nop
 202:	42 98       	cbi	0x08, 2	; 8
 204:	08 95       	ret

00000206 <lcd_init>:
 206:	95 df       	rcall	.-214    	; 0x132 <lcd_set_4bit>
 208:	86 e6       	ldi	r24, 0x66	; 102
 20a:	9e e0       	ldi	r25, 0x0E	; 14
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_init+0x6>
 210:	00 00       	nop
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	d3 df       	rcall	.-90     	; 0x1bc <lcd_wr_command>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	d1 df       	rcall	.-94     	; 0x1bc <lcd_wr_command>
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	cf df       	rcall	.-98     	; 0x1bc <lcd_wr_command>
 21e:	8e e0       	ldi	r24, 0x0E	; 14
 220:	cd df       	rcall	.-102    	; 0x1bc <lcd_wr_command>
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	cb cf       	rjmp	.-106    	; 0x1bc <lcd_wr_command>
 226:	08 95       	ret

00000228 <lcd_wr_char>:
 228:	98 b1       	in	r25, 0x08	; 8
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	98 b9       	out	0x08, r25	; 8
 22e:	98 b1       	in	r25, 0x08	; 8
 230:	28 2f       	mov	r18, r24
 232:	20 7f       	andi	r18, 0xF0	; 240
 234:	92 2b       	or	r25, r18
 236:	98 b9       	out	0x08, r25	; 8
 238:	40 9a       	sbi	0x08, 0	; 8
 23a:	41 98       	cbi	0x08, 1	; 8
 23c:	42 9a       	sbi	0x08, 2	; 8
 23e:	ef ef       	ldi	r30, 0xFF	; 255
 240:	f7 e4       	ldi	r31, 0x47	; 71
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_wr_char+0x1a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_wr_char+0x20>
 248:	00 00       	nop
 24a:	42 98       	cbi	0x08, 2	; 8
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	98 b9       	out	0x08, r25	; 8
 252:	98 b1       	in	r25, 0x08	; 8
 254:	82 95       	swap	r24
 256:	80 7f       	andi	r24, 0xF0	; 240
 258:	89 2b       	or	r24, r25
 25a:	88 b9       	out	0x08, r24	; 8
 25c:	40 9a       	sbi	0x08, 0	; 8
 25e:	41 98       	cbi	0x08, 1	; 8
 260:	42 9a       	sbi	0x08, 2	; 8
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	97 e4       	ldi	r25, 0x47	; 71
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x3e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x44>
 26c:	00 00       	nop
 26e:	42 98       	cbi	0x08, 2	; 8
 270:	08 95       	ret

00000272 <lcd_home>:
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	a3 cf       	rjmp	.-186    	; 0x1bc <lcd_wr_command>
 276:	08 95       	ret

00000278 <lcd_string>:
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
 27e:	88 81       	ld	r24, Y
 280:	88 23       	and	r24, r24
 282:	29 f0       	breq	.+10     	; 0x28e <lcd_string+0x16>
 284:	21 96       	adiw	r28, 0x01	; 1
 286:	d0 df       	rcall	.-96     	; 0x228 <lcd_wr_char>
 288:	89 91       	ld	r24, Y+
 28a:	81 11       	cpse	r24, r1
 28c:	fc cf       	rjmp	.-8      	; 0x286 <lcd_string+0xe>
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <lcd_cursor>:
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	69 f0       	breq	.+26     	; 0x2b2 <lcd_cursor+0x1e>
 298:	18 f4       	brcc	.+6      	; 0x2a0 <lcd_cursor+0xc>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	31 f0       	breq	.+12     	; 0x2aa <lcd_cursor+0x16>
 29e:	08 95       	ret
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	59 f0       	breq	.+22     	; 0x2ba <lcd_cursor+0x26>
 2a4:	84 30       	cpi	r24, 0x04	; 4
 2a6:	69 f0       	breq	.+26     	; 0x2c2 <lcd_cursor+0x2e>
 2a8:	08 95       	ret
 2aa:	8f e7       	ldi	r24, 0x7F	; 127
 2ac:	86 0f       	add	r24, r22
 2ae:	86 cf       	rjmp	.-244    	; 0x1bc <lcd_wr_command>
 2b0:	08 95       	ret
 2b2:	8f eb       	ldi	r24, 0xBF	; 191
 2b4:	86 0f       	add	r24, r22
 2b6:	82 cf       	rjmp	.-252    	; 0x1bc <lcd_wr_command>
 2b8:	08 95       	ret
 2ba:	83 e9       	ldi	r24, 0x93	; 147
 2bc:	86 0f       	add	r24, r22
 2be:	7e cf       	rjmp	.-260    	; 0x1bc <lcd_wr_command>
 2c0:	08 95       	ret
 2c2:	83 ed       	ldi	r24, 0xD3	; 211
 2c4:	86 0f       	add	r24, r22
 2c6:	7a cf       	rjmp	.-268    	; 0x1bc <lcd_wr_command>
 2c8:	08 95       	ret

000002ca <lcd_print>:
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	8a 01       	movw	r16, r20
 2d4:	e9 01       	movw	r28, r18
 2d6:	88 23       	and	r24, r24
 2d8:	11 f0       	breq	.+4      	; 0x2de <lcd_print+0x14>
 2da:	61 11       	cpse	r22, r1
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <lcd_print+0x18>
 2de:	c9 df       	rcall	.-110    	; 0x272 <lcd_home>
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <lcd_print+0x1a>
 2e2:	d8 df       	rcall	.-80     	; 0x294 <lcd_cursor>
 2e4:	c5 30       	cpi	r28, 0x05	; 5
 2e6:	d1 05       	cpc	r29, r1
 2e8:	09 f0       	breq	.+2      	; 0x2ec <lcd_print+0x22>
 2ea:	cd c0       	rjmp	.+410    	; 0x486 <lcd_print+0x1bc>
 2ec:	98 01       	movw	r18, r16
 2ee:	32 95       	swap	r19
 2f0:	22 95       	swap	r18
 2f2:	2f 70       	andi	r18, 0x0F	; 15
 2f4:	23 27       	eor	r18, r19
 2f6:	3f 70       	andi	r19, 0x0F	; 15
 2f8:	23 27       	eor	r18, r19
 2fa:	a7 e4       	ldi	r26, 0x47	; 71
 2fc:	b3 e0       	ldi	r27, 0x03	; 3
 2fe:	f0 d2       	rcall	.+1504   	; 0x8e0 <__umulhisi3>
 300:	96 95       	lsr	r25
 302:	87 95       	ror	r24
 304:	96 95       	lsr	r25
 306:	87 95       	ror	r24
 308:	96 95       	lsr	r25
 30a:	87 95       	ror	r24
 30c:	c0 96       	adiw	r24, 0x30	; 48
 30e:	90 93 15 02 	sts	0x0215, r25
 312:	80 93 14 02 	sts	0x0214, r24
 316:	88 df       	rcall	.-240    	; 0x228 <lcd_wr_char>
 318:	98 01       	movw	r18, r16
 31a:	36 95       	lsr	r19
 31c:	27 95       	ror	r18
 31e:	36 95       	lsr	r19
 320:	27 95       	ror	r18
 322:	36 95       	lsr	r19
 324:	27 95       	ror	r18
 326:	a5 ec       	ldi	r26, 0xC5	; 197
 328:	b0 e2       	ldi	r27, 0x20	; 32
 32a:	da d2       	rcall	.+1460   	; 0x8e0 <__umulhisi3>
 32c:	ac 01       	movw	r20, r24
 32e:	52 95       	swap	r21
 330:	42 95       	swap	r20
 332:	4f 70       	andi	r20, 0x0F	; 15
 334:	45 27       	eor	r20, r21
 336:	5f 70       	andi	r21, 0x0F	; 15
 338:	45 27       	eor	r20, r21
 33a:	50 93 17 02 	sts	0x0217, r21
 33e:	40 93 16 02 	sts	0x0216, r20
 342:	9a 01       	movw	r18, r20
 344:	ad ec       	ldi	r26, 0xCD	; 205
 346:	bc ec       	ldi	r27, 0xCC	; 204
 348:	cb d2       	rcall	.+1430   	; 0x8e0 <__umulhisi3>
 34a:	96 95       	lsr	r25
 34c:	87 95       	ror	r24
 34e:	96 95       	lsr	r25
 350:	87 95       	ror	r24
 352:	96 95       	lsr	r25
 354:	87 95       	ror	r24
 356:	9c 01       	movw	r18, r24
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	82 0f       	add	r24, r18
 36a:	93 1f       	adc	r25, r19
 36c:	48 1b       	sub	r20, r24
 36e:	59 0b       	sbc	r21, r25
 370:	ca 01       	movw	r24, r20
 372:	c0 96       	adiw	r24, 0x30	; 48
 374:	90 93 20 02 	sts	0x0220, r25
 378:	80 93 1f 02 	sts	0x021F, r24
 37c:	55 df       	rcall	.-342    	; 0x228 <lcd_wr_char>
 37e:	04 c0       	rjmp	.+8      	; 0x388 <lcd_print+0xbe>
 380:	c3 30       	cpi	r28, 0x03	; 3
 382:	d1 05       	cpc	r29, r1
 384:	09 f0       	breq	.+2      	; 0x388 <lcd_print+0xbe>
 386:	84 c0       	rjmp	.+264    	; 0x490 <lcd_print+0x1c6>
 388:	98 01       	movw	r18, r16
 38a:	36 95       	lsr	r19
 38c:	27 95       	ror	r18
 38e:	36 95       	lsr	r19
 390:	27 95       	ror	r18
 392:	ab e7       	ldi	r26, 0x7B	; 123
 394:	b4 e1       	ldi	r27, 0x14	; 20
 396:	a4 d2       	rcall	.+1352   	; 0x8e0 <__umulhisi3>
 398:	ac 01       	movw	r20, r24
 39a:	56 95       	lsr	r21
 39c:	47 95       	ror	r20
 39e:	50 93 17 02 	sts	0x0217, r21
 3a2:	40 93 16 02 	sts	0x0216, r20
 3a6:	9a 01       	movw	r18, r20
 3a8:	ad ec       	ldi	r26, 0xCD	; 205
 3aa:	bc ec       	ldi	r27, 0xCC	; 204
 3ac:	99 d2       	rcall	.+1330   	; 0x8e0 <__umulhisi3>
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	96 95       	lsr	r25
 3b4:	87 95       	ror	r24
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	9c 01       	movw	r18, r24
 3bc:	22 0f       	add	r18, r18
 3be:	33 1f       	adc	r19, r19
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	82 0f       	add	r24, r18
 3ce:	93 1f       	adc	r25, r19
 3d0:	48 1b       	sub	r20, r24
 3d2:	59 0b       	sbc	r21, r25
 3d4:	ca 01       	movw	r24, r20
 3d6:	c0 96       	adiw	r24, 0x30	; 48
 3d8:	90 93 1c 02 	sts	0x021C, r25
 3dc:	80 93 1b 02 	sts	0x021B, r24
 3e0:	23 df       	rcall	.-442    	; 0x228 <lcd_wr_char>
 3e2:	98 01       	movw	r18, r16
 3e4:	ad ec       	ldi	r26, 0xCD	; 205
 3e6:	bc ec       	ldi	r27, 0xCC	; 204
 3e8:	7b d2       	rcall	.+1270   	; 0x8e0 <__umulhisi3>
 3ea:	ac 01       	movw	r20, r24
 3ec:	56 95       	lsr	r21
 3ee:	47 95       	ror	r20
 3f0:	56 95       	lsr	r21
 3f2:	47 95       	ror	r20
 3f4:	56 95       	lsr	r21
 3f6:	47 95       	ror	r20
 3f8:	50 93 17 02 	sts	0x0217, r21
 3fc:	40 93 16 02 	sts	0x0216, r20
 400:	9a 01       	movw	r18, r20
 402:	6e d2       	rcall	.+1244   	; 0x8e0 <__umulhisi3>
 404:	96 95       	lsr	r25
 406:	87 95       	ror	r24
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	9c 01       	movw	r18, r24
 412:	22 0f       	add	r18, r18
 414:	33 1f       	adc	r19, r19
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	82 0f       	add	r24, r18
 424:	93 1f       	adc	r25, r19
 426:	48 1b       	sub	r20, r24
 428:	59 0b       	sbc	r21, r25
 42a:	ca 01       	movw	r24, r20
 42c:	c0 96       	adiw	r24, 0x30	; 48
 42e:	90 93 1a 02 	sts	0x021A, r25
 432:	80 93 19 02 	sts	0x0219, r24
 436:	f8 de       	rcall	.-528    	; 0x228 <lcd_wr_char>
 438:	03 c0       	rjmp	.+6      	; 0x440 <lcd_print+0x176>
 43a:	c1 30       	cpi	r28, 0x01	; 1
 43c:	d1 05       	cpc	r29, r1
 43e:	f1 f4       	brne	.+60     	; 0x47c <lcd_print+0x1b2>
 440:	98 01       	movw	r18, r16
 442:	ad ec       	ldi	r26, 0xCD	; 205
 444:	bc ec       	ldi	r27, 0xCC	; 204
 446:	4c d2       	rcall	.+1176   	; 0x8e0 <__umulhisi3>
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	96 95       	lsr	r25
 452:	87 95       	ror	r24
 454:	9c 01       	movw	r18, r24
 456:	22 0f       	add	r18, r18
 458:	33 1f       	adc	r19, r19
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	82 0f       	add	r24, r18
 468:	93 1f       	adc	r25, r19
 46a:	08 1b       	sub	r16, r24
 46c:	19 0b       	sbc	r17, r25
 46e:	c8 01       	movw	r24, r16
 470:	c0 96       	adiw	r24, 0x30	; 48
 472:	90 93 1e 02 	sts	0x021E, r25
 476:	80 93 1d 02 	sts	0x021D, r24
 47a:	d6 de       	rcall	.-596    	; 0x228 <lcd_wr_char>
 47c:	26 97       	sbiw	r28, 0x06	; 6
 47e:	64 f0       	brlt	.+24     	; 0x498 <lcd_print+0x1ce>
 480:	85 e4       	ldi	r24, 0x45	; 69
 482:	d2 de       	rcall	.-604    	; 0x228 <lcd_wr_char>
 484:	09 c0       	rjmp	.+18     	; 0x498 <lcd_print+0x1ce>
 486:	c4 30       	cpi	r28, 0x04	; 4
 488:	d1 05       	cpc	r29, r1
 48a:	09 f0       	breq	.+2      	; 0x48e <lcd_print+0x1c4>
 48c:	79 cf       	rjmp	.-270    	; 0x380 <lcd_print+0xb6>
 48e:	44 cf       	rjmp	.-376    	; 0x318 <lcd_print+0x4e>
 490:	c2 30       	cpi	r28, 0x02	; 2
 492:	d1 05       	cpc	r29, r1
 494:	91 f6       	brne	.-92     	; 0x43a <lcd_print+0x170>
 496:	a5 cf       	rjmp	.-182    	; 0x3e2 <lcd_print+0x118>
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	08 95       	ret

000004a2 <adc_pin_config>:
 4a2:	10 ba       	out	0x10, r1	; 16
 4a4:	11 ba       	out	0x11, r1	; 17
 4a6:	10 92 07 01 	sts	0x0107, r1
 4aa:	10 92 08 01 	sts	0x0108, r1
 4ae:	08 95       	ret

000004b0 <motion_pin_config>:
 4b0:	81 b1       	in	r24, 0x01	; 1
 4b2:	8f 60       	ori	r24, 0x0F	; 15
 4b4:	81 b9       	out	0x01, r24	; 1
 4b6:	82 b1       	in	r24, 0x02	; 2
 4b8:	80 7f       	andi	r24, 0xF0	; 240
 4ba:	82 b9       	out	0x02, r24	; 2
 4bc:	ea e0       	ldi	r30, 0x0A	; 10
 4be:	f1 e0       	ldi	r31, 0x01	; 1
 4c0:	80 81       	ld	r24, Z
 4c2:	88 61       	ori	r24, 0x18	; 24
 4c4:	80 83       	st	Z, r24
 4c6:	eb e0       	ldi	r30, 0x0B	; 11
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	80 81       	ld	r24, Z
 4cc:	88 61       	ori	r24, 0x18	; 24
 4ce:	80 83       	st	Z, r24
 4d0:	08 95       	ret

000004d2 <port_init>:
 4d2:	28 de       	rcall	.-944    	; 0x124 <lcd_port_config>
 4d4:	e6 df       	rcall	.-52     	; 0x4a2 <adc_pin_config>
 4d6:	ec cf       	rjmp	.-40     	; 0x4b0 <motion_pin_config>
 4d8:	08 95       	ret

000004da <timer5_init>:
 4da:	e1 e2       	ldi	r30, 0x21	; 33
 4dc:	f1 e0       	ldi	r31, 0x01	; 1
 4de:	10 82       	st	Z, r1
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	80 93 25 01 	sts	0x0125, r24
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	90 93 24 01 	sts	0x0124, r25
 4ec:	10 92 29 01 	sts	0x0129, r1
 4f0:	80 93 28 01 	sts	0x0128, r24
 4f4:	10 92 2b 01 	sts	0x012B, r1
 4f8:	80 93 2a 01 	sts	0x012A, r24
 4fc:	10 92 2d 01 	sts	0x012D, r1
 500:	80 93 2c 01 	sts	0x012C, r24
 504:	89 ea       	ldi	r24, 0xA9	; 169
 506:	80 93 20 01 	sts	0x0120, r24
 50a:	8b e0       	ldi	r24, 0x0B	; 11
 50c:	80 83       	st	Z, r24
 50e:	08 95       	ret

00000510 <adc_init>:
 510:	ea e7       	ldi	r30, 0x7A	; 122
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	10 82       	st	Z, r1
 516:	10 92 7b 00 	sts	0x007B, r1
 51a:	80 e2       	ldi	r24, 0x20	; 32
 51c:	80 93 7c 00 	sts	0x007C, r24
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	80 bf       	out	0x30, r24	; 48
 524:	86 e8       	ldi	r24, 0x86	; 134
 526:	80 83       	st	Z, r24
 528:	08 95       	ret

0000052a <ADC_Conversion>:
 52a:	88 30       	cpi	r24, 0x08	; 8
 52c:	18 f0       	brcs	.+6      	; 0x534 <ADC_Conversion+0xa>
 52e:	98 e0       	ldi	r25, 0x08	; 8
 530:	90 93 7b 00 	sts	0x007B, r25
 534:	87 70       	andi	r24, 0x07	; 7
 536:	80 62       	ori	r24, 0x20	; 32
 538:	80 93 7c 00 	sts	0x007C, r24
 53c:	ea e7       	ldi	r30, 0x7A	; 122
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	80 64       	ori	r24, 0x40	; 64
 544:	80 83       	st	Z, r24
 546:	80 81       	ld	r24, Z
 548:	84 ff       	sbrs	r24, 4
 54a:	fd cf       	rjmp	.-6      	; 0x546 <ADC_Conversion+0x1c>
 54c:	80 91 79 00 	lds	r24, 0x0079
 550:	ea e7       	ldi	r30, 0x7A	; 122
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	90 81       	ld	r25, Z
 556:	90 61       	ori	r25, 0x10	; 16
 558:	90 83       	st	Z, r25
 55a:	10 92 7b 00 	sts	0x007B, r1
 55e:	08 95       	ret

00000560 <print_sensor>:
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	c8 2f       	mov	r28, r24
 566:	d6 2f       	mov	r29, r22
 568:	84 2f       	mov	r24, r20
 56a:	df df       	rcall	.-66     	; 0x52a <ADC_Conversion>
 56c:	80 93 18 02 	sts	0x0218, r24
 570:	48 2f       	mov	r20, r24
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	23 e0       	ldi	r18, 0x03	; 3
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	6d 2f       	mov	r22, r29
 57a:	8c 2f       	mov	r24, r28
 57c:	a6 de       	rcall	.-692    	; 0x2ca <lcd_print>
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	08 95       	ret

00000584 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
 584:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 586:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 588:	8f 70       	andi	r24, 0x0F	; 15
 PortARestore = PORTA; 		// reading the PORTA original status
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 58a:	98 2b       	or	r25, r24
 PORTA = PortARestore; 		// executing the command
 58c:	92 b9       	out	0x02, r25	; 2
 58e:	08 95       	ret

00000590 <stop>:
}

void stop (void)
{
	motion_set (0x00);
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	f8 cf       	rjmp	.-16     	; 0x584 <motion_set>
 594:	08 95       	ret

00000596 <forward>:
}

void forward (void) 
{
  motion_set (0x06);
 596:	86 e0       	ldi	r24, 0x06	; 6
 598:	f5 cf       	rjmp	.-22     	; 0x584 <motion_set>
 59a:	08 95       	ret

0000059c <left>:
}

void left (void)
{
	motion_set (0x05);
 59c:	85 e0       	ldi	r24, 0x05	; 5
 59e:	f2 cf       	rjmp	.-28     	; 0x584 <motion_set>
 5a0:	08 95       	ret

000005a2 <right>:
}

void right (void)
{
	motion_set (0x0A);
 5a2:	8a e0       	ldi	r24, 0x0A	; 10
 5a4:	ef cf       	rjmp	.-34     	; 0x584 <motion_set>
 5a6:	08 95       	ret

000005a8 <soft_right>:
}

void soft_right (void)
{
	motion_set (0x02);
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	ec cf       	rjmp	.-40     	; 0x584 <motion_set>
 5ac:	08 95       	ret

000005ae <soft_left>:
}
void soft_left (void)
{
	motion_set (0x04);
 5ae:	84 e0       	ldi	r24, 0x04	; 4
 5b0:	e9 cf       	rjmp	.-46     	; 0x584 <motion_set>
 5b2:	08 95       	ret

000005b4 <back>:
}

void back(void) //both wheels backward
{
	motion_set(0x09);
 5b4:	89 e0       	ldi	r24, 0x09	; 9
 5b6:	e6 cf       	rjmp	.-52     	; 0x584 <motion_set>
 5b8:	08 95       	ret

000005ba <init_devices>:
}

void init_devices (void)
{
 	cli(); //Clears the global interrupts
 5ba:	f8 94       	cli
	port_init();
 5bc:	8a df       	rcall	.-236    	; 0x4d2 <port_init>
	adc_init();
 5be:	a8 df       	rcall	.-176    	; 0x510 <adc_init>
	timer5_init();
 5c0:	8c df       	rcall	.-232    	; 0x4da <timer5_init>
	sei();   //Enables the global interrupts
 5c2:	78 94       	sei
 5c4:	08 95       	ret

000005c6 <main>:
}

//Main Function
int main()
{
	init_devices();
 5c6:	f9 df       	rcall	.-14     	; 0x5ba <init_devices>
	lcd_set_4bit();
 5c8:	b4 dd       	rcall	.-1176   	; 0x132 <lcd_set_4bit>
	lcd_init();
 5ca:	1d de       	rcall	.-966    	; 0x206 <lcd_init>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 5cc:	08 e2       	ldi	r16, 0x28	; 40
 5ce:	11 e0       	ldi	r17, 0x01	; 1
 5d0:	0f 2e       	mov	r0, r31
 5d2:	f2 e3       	ldi	r31, 0x32	; 50
 5d4:	df 2e       	mov	r13, r31
 5d6:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
 5d8:	ca e2       	ldi	r28, 0x2A	; 42
 5da:	d1 e0       	ldi	r29, 0x01	; 1
 5dc:	0f 2e       	mov	r0, r31
 5de:	f2 e8       	ldi	r31, 0x82	; 130
 5e0:	ef 2e       	mov	r14, r31
 5e2:	f0 2d       	mov	r31, r0
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 5e4:	0f 2e       	mov	r0, r31
 5e6:	f6 e9       	ldi	r31, 0x96	; 150
 5e8:	cf 2e       	mov	r12, r31
 5ea:	f0 2d       	mov	r31, r0
 5ec:	0f 2e       	mov	r0, r31
 5ee:	f4 e6       	ldi	r31, 0x64	; 100
 5f0:	ff 2e       	mov	r15, r31
 5f2:	f0 2d       	mov	r31, r0
	lcd_init();
	
	while(1)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 5f4:	83 e0       	ldi	r24, 0x03	; 3
 5f6:	99 df       	rcall	.-206    	; 0x52a <ADC_Conversion>
 5f8:	80 93 12 02 	sts	0x0212, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	95 df       	rcall	.-214    	; 0x52a <ADC_Conversion>
 600:	80 93 11 02 	sts	0x0211, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	91 df       	rcall	.-222    	; 0x52a <ADC_Conversion>
 608:	80 93 10 02 	sts	0x0210, r24

		flag=0;
 60c:	10 92 13 02 	sts	0x0213, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
 610:	43 e0       	ldi	r20, 0x03	; 3
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	a4 df       	rcall	.-184    	; 0x560 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 618:	42 e0       	ldi	r20, 0x02	; 2
 61a:	65 e0       	ldi	r22, 0x05	; 5
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	a0 df       	rcall	.-192    	; 0x560 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	69 e0       	ldi	r22, 0x09	; 9
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	9c df       	rcall	.-200    	; 0x560 <print_sensor>
		lcd_cursor(2,1);
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	33 de       	rcall	.-922    	; 0x294 <lcd_cursor>
		lcd_string("JAI SHRI RAM");
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	92 e0       	ldi	r25, 0x02	; 2
 632:	22 de       	rcall	.-956    	; 0x278 <lcd_string>
		
		 if(Center_white_line<=threshold && Left_white_line<=threshold && Right_white_line<=threshold && (flag==0)) 
 634:	80 91 00 02 	lds	r24, 0x0200
 638:	90 91 01 02 	lds	r25, 0x0201
 63c:	20 91 11 02 	lds	r18, 0x0211
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	82 17       	cp	r24, r18
 644:	93 07       	cpc	r25, r19
 646:	08 f4       	brcc	.+2      	; 0x64a <main+0x84>
 648:	2d c1       	rjmp	.+602    	; 0x8a4 <main+0x2de>
 64a:	20 91 12 02 	lds	r18, 0x0212
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	82 17       	cp	r24, r18
 652:	93 07       	cpc	r25, r19
 654:	08 f4       	brcc	.+2      	; 0x658 <main+0x92>
 656:	2b c1       	rjmp	.+598    	; 0x8ae <main+0x2e8>
 658:	20 91 10 02 	lds	r18, 0x0210
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	82 17       	cp	r24, r18
 660:	93 07       	cpc	r25, r19
 662:	08 f4       	brcc	.+2      	; 0x666 <main+0xa0>
 664:	24 c1       	rjmp	.+584    	; 0x8ae <main+0x2e8>
 666:	80 91 13 02 	lds	r24, 0x0213
 66a:	81 11       	cpse	r24, r1
 66c:	20 c1       	rjmp	.+576    	; 0x8ae <main+0x2e8>
		 {   
			 flag=1;
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	80 93 13 02 	sts	0x0213, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 674:	f8 01       	movw	r30, r16
 676:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 678:	f8 82       	st	Y, r15
		
		 if(Center_white_line<=threshold && Left_white_line<=threshold && Right_white_line<=threshold && (flag==0)) 
		 {   
			 flag=1;
			 velocity(100,100);
			 back();
 67a:	9c df       	rcall	.-200    	; 0x5b4 <back>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 67c:	ff ef       	ldi	r31, 0xFF	; 255
 67e:	2f eb       	ldi	r18, 0xBF	; 191
 680:	8f e0       	ldi	r24, 0x0F	; 15
 682:	f1 50       	subi	r31, 0x01	; 1
 684:	20 40       	sbci	r18, 0x00	; 0
 686:	80 40       	sbci	r24, 0x00	; 0
 688:	e1 f7       	brne	.-8      	; 0x682 <main+0xbc>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <main+0xc6>
 68c:	00 00       	nop
			 _delay_ms(350);
			 if(Center_white_line<=threshold && Left_white_line<=threshold && Right_white_line<=threshold && (flag==1))
 68e:	80 91 00 02 	lds	r24, 0x0200
 692:	90 91 01 02 	lds	r25, 0x0201
 696:	20 91 11 02 	lds	r18, 0x0211
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	82 17       	cp	r24, r18
 69e:	93 07       	cpc	r25, r19
 6a0:	08 f4       	brcc	.+2      	; 0x6a4 <main+0xde>
 6a2:	00 c1       	rjmp	.+512    	; 0x8a4 <main+0x2de>
 6a4:	20 91 12 02 	lds	r18, 0x0212
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	82 17       	cp	r24, r18
 6ac:	93 07       	cpc	r25, r19
 6ae:	08 f4       	brcc	.+2      	; 0x6b2 <main+0xec>
 6b0:	fe c0       	rjmp	.+508    	; 0x8ae <main+0x2e8>
 6b2:	20 91 10 02 	lds	r18, 0x0210
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	82 17       	cp	r24, r18
 6ba:	93 07       	cpc	r25, r19
 6bc:	08 f4       	brcc	.+2      	; 0x6c0 <main+0xfa>
 6be:	f7 c0       	rjmp	.+494    	; 0x8ae <main+0x2e8>
 6c0:	80 91 13 02 	lds	r24, 0x0213
 6c4:	81 30       	cpi	r24, 0x01	; 1
 6c6:	09 f0       	breq	.+2      	; 0x6ca <main+0x104>
 6c8:	f2 c0       	rjmp	.+484    	; 0x8ae <main+0x2e8>
			 {
				 stop();
 6ca:	62 df       	rcall	.-316    	; 0x590 <stop>
 6cc:	9f ef       	ldi	r25, 0xFF	; 255
 6ce:	ef e7       	ldi	r30, 0x7F	; 127
 6d0:	f6 e1       	ldi	r31, 0x16	; 22
 6d2:	91 50       	subi	r25, 0x01	; 1
 6d4:	e0 40       	sbci	r30, 0x00	; 0
 6d6:	f0 40       	sbci	r31, 0x00	; 0
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <main+0x10c>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <main+0x116>
 6dc:	00 00       	nop
				goto next;
			 }
		 }
		 
		 next:
		  if(Center_white_line>threshold && Left_white_line>threshold && Right_white_line>threshold && (flag==0))
 6de:	80 91 00 02 	lds	r24, 0x0200
 6e2:	90 91 01 02 	lds	r25, 0x0201
 6e6:	20 91 11 02 	lds	r18, 0x0211
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	82 17       	cp	r24, r18
 6ee:	93 07       	cpc	r25, r19
 6f0:	08 f0       	brcs	.+2      	; 0x6f4 <main+0x12e>
 6f2:	dd c0       	rjmp	.+442    	; 0x8ae <main+0x2e8>
 6f4:	20 91 12 02 	lds	r18, 0x0212
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	82 17       	cp	r24, r18
 6fc:	93 07       	cpc	r25, r19
 6fe:	08 f0       	brcs	.+2      	; 0x702 <main+0x13c>
 700:	86 c0       	rjmp	.+268    	; 0x80e <main+0x248>
 702:	20 91 10 02 	lds	r18, 0x0210
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	82 17       	cp	r24, r18
 70a:	93 07       	cpc	r25, r19
 70c:	08 f0       	brcs	.+2      	; 0x710 <main+0x14a>
 70e:	7f c0       	rjmp	.+254    	; 0x80e <main+0x248>
 710:	80 91 13 02 	lds	r24, 0x0213
 714:	81 11       	cpse	r24, r1
 716:	7b c0       	rjmp	.+246    	; 0x80e <main+0x248>
		  {  
			  flag=1;
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	80 93 13 02 	sts	0x0213, r24
			  stop();
 71e:	38 df       	rcall	.-400    	; 0x590 <stop>
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	8f e3       	ldi	r24, 0x3F	; 63
 724:	9b e0       	ldi	r25, 0x0B	; 11
 726:	21 50       	subi	r18, 0x01	; 1
 728:	80 40       	sbci	r24, 0x00	; 0
 72a:	90 40       	sbci	r25, 0x00	; 0
 72c:	e1 f7       	brne	.-8      	; 0x726 <main+0x160>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <main+0x16a>
 730:	00 00       	nop
			  _delay_ms(250);
			  forward();
 732:	31 df       	rcall	.-414    	; 0x596 <forward>
		  }
		

		if((Center_white_line<=threshold) && (Left_white_line>threshold && Right_white_line>threshold) && (flag==0))
 734:	80 91 00 02 	lds	r24, 0x0200
 738:	90 91 01 02 	lds	r25, 0x0201
 73c:	20 91 11 02 	lds	r18, 0x0211
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	82 17       	cp	r24, r18
 744:	93 07       	cpc	r25, r19
 746:	08 f4       	brcc	.+2      	; 0x74a <main+0x184>
 748:	62 c0       	rjmp	.+196    	; 0x80e <main+0x248>
 74a:	20 91 12 02 	lds	r18, 0x0212
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	82 17       	cp	r24, r18
 752:	93 07       	cpc	r25, r19
 754:	08 f0       	brcs	.+2      	; 0x758 <main+0x192>
 756:	b0 c0       	rjmp	.+352    	; 0x8b8 <main+0x2f2>
 758:	20 91 10 02 	lds	r18, 0x0210
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	82 17       	cp	r24, r18
 760:	93 07       	cpc	r25, r19
 762:	08 f0       	brcs	.+2      	; 0x766 <main+0x1a0>
 764:	a9 c0       	rjmp	.+338    	; 0x8b8 <main+0x2f2>
 766:	80 91 13 02 	lds	r24, 0x0213
 76a:	81 11       	cpse	r24, r1
 76c:	a5 c0       	rjmp	.+330    	; 0x8b8 <main+0x2f2>
		{
			flag=1;
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	80 93 13 02 	sts	0x0213, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 774:	f8 01       	movw	r30, r16
 776:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
 778:	f8 82       	st	Y, r15

		if((Center_white_line<=threshold) && (Left_white_line>threshold && Right_white_line>threshold) && (flag==0))
		{
			flag=1;
			velocity(100,100);
			forward();
 77a:	0d df       	rcall	.-486    	; 0x596 <forward>
			     /*if((Left_white_line<=threshold) && (Right_white_line<=threshold))
			     {   flag=1;
				     velocity(0,0);
			     }*/
				 
		if((Center_white_line<=threshold) && (Left_white_line<=threshold && Right_white_line>threshold) && (flag==0))
 77c:	80 91 00 02 	lds	r24, 0x0200
 780:	90 91 01 02 	lds	r25, 0x0201
 784:	20 91 11 02 	lds	r18, 0x0211
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	82 17       	cp	r24, r18
 78c:	93 07       	cpc	r25, r19
 78e:	08 f4       	brcc	.+2      	; 0x792 <main+0x1cc>
 790:	3e c0       	rjmp	.+124    	; 0x80e <main+0x248>
 792:	20 91 12 02 	lds	r18, 0x0212
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	82 17       	cp	r24, r18
 79a:	93 07       	cpc	r25, r19
 79c:	08 f4       	brcc	.+2      	; 0x7a0 <main+0x1da>
 79e:	91 c0       	rjmp	.+290    	; 0x8c2 <main+0x2fc>
 7a0:	20 91 10 02 	lds	r18, 0x0210
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	82 17       	cp	r24, r18
 7a8:	93 07       	cpc	r25, r19
 7aa:	08 f0       	brcs	.+2      	; 0x7ae <main+0x1e8>
 7ac:	8a c0       	rjmp	.+276    	; 0x8c2 <main+0x2fc>
 7ae:	80 91 13 02 	lds	r24, 0x0213
 7b2:	81 11       	cpse	r24, r1
 7b4:	86 c0       	rjmp	.+268    	; 0x8c2 <main+0x2fc>
		{ 
			flag=1;
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	80 93 13 02 	sts	0x0213, r24
			soft_left();
 7bc:	f8 de       	rcall	.-528    	; 0x5ae <soft_left>
			forward();
 7be:	eb de       	rcall	.-554    	; 0x596 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 7c0:	f8 01       	movw	r30, r16
 7c2:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
 7c4:	c8 82       	st	Y, r12
					soft_left();
					//forward();
					velocity(0,200);
				}*/
				
		if((Center_white_line<=threshold) && (Right_white_line<=threshold && Left_white_line>threshold) && (flag==0))
 7c6:	80 91 00 02 	lds	r24, 0x0200
 7ca:	90 91 01 02 	lds	r25, 0x0201
 7ce:	20 91 11 02 	lds	r18, 0x0211
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	82 17       	cp	r24, r18
 7d6:	93 07       	cpc	r25, r19
 7d8:	d0 f0       	brcs	.+52     	; 0x80e <main+0x248>
 7da:	20 91 10 02 	lds	r18, 0x0210
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	82 17       	cp	r24, r18
 7e2:	93 07       	cpc	r25, r19
 7e4:	08 f4       	brcc	.+2      	; 0x7e8 <main+0x222>
 7e6:	77 c0       	rjmp	.+238    	; 0x8d6 <main+0x310>
 7e8:	20 91 12 02 	lds	r18, 0x0212
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	82 17       	cp	r24, r18
 7f0:	93 07       	cpc	r25, r19
 7f2:	08 f0       	brcs	.+2      	; 0x7f6 <main+0x230>
 7f4:	6b c0       	rjmp	.+214    	; 0x8cc <main+0x306>
 7f6:	80 91 13 02 	lds	r24, 0x0213
 7fa:	81 11       	cpse	r24, r1
 7fc:	67 c0       	rjmp	.+206    	; 0x8cc <main+0x306>
		{   
			flag=1;
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	80 93 13 02 	sts	0x0213, r24
			soft_right();
 804:	d1 de       	rcall	.-606    	; 0x5a8 <soft_right>
			forward();
 806:	c7 de       	rcall	.-626    	; 0x596 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 808:	f8 01       	movw	r30, r16
 80a:	c0 82       	st	Z, r12
	OCR5BL = (unsigned char)right_motor;
 80c:	18 82       	st	Y, r1
					//forward();
					velocity(200,0);
				}*/
		
		
	    if((Right_white_line<=threshold) && (Center_white_line>threshold) && (Left_white_line>threshold) && (flag==0))
 80e:	80 91 00 02 	lds	r24, 0x0200
 812:	90 91 01 02 	lds	r25, 0x0201
 816:	20 91 10 02 	lds	r18, 0x0210
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	82 17       	cp	r24, r18
 81e:	93 07       	cpc	r25, r19
 820:	08 f4       	brcc	.+2      	; 0x824 <main+0x25e>
 822:	59 c0       	rjmp	.+178    	; 0x8d6 <main+0x310>
 824:	20 91 11 02 	lds	r18, 0x0211
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	82 17       	cp	r24, r18
 82c:	93 07       	cpc	r25, r19
 82e:	08 f0       	brcs	.+2      	; 0x832 <main+0x26c>
 830:	e1 ce       	rjmp	.-574    	; 0x5f4 <main+0x2e>
 832:	20 91 12 02 	lds	r18, 0x0212
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	82 17       	cp	r24, r18
 83a:	93 07       	cpc	r25, r19
 83c:	08 f0       	brcs	.+2      	; 0x840 <main+0x27a>
 83e:	da ce       	rjmp	.-588    	; 0x5f4 <main+0x2e>
 840:	80 91 13 02 	lds	r24, 0x0213
 844:	81 11       	cpse	r24, r1
 846:	d6 ce       	rjmp	.-596    	; 0x5f4 <main+0x2e>
		{
			flag=1;
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	80 93 13 02 	sts	0x0213, r24
			right();
 84e:	a9 de       	rcall	.-686    	; 0x5a2 <right>
			forward();
 850:	a2 de       	rcall	.-700    	; 0x596 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 852:	f8 01       	movw	r30, r16
 854:	e0 82       	st	Z, r14
	OCR5BL = (unsigned char)right_motor;
 856:	d8 82       	st	Y, r13
			forward();
			velocity(130,50);
			
		}

       if((Right_white_line>threshold) && (Center_white_line>threshold) && (Left_white_line<=threshold) && (flag==0))
 858:	80 91 00 02 	lds	r24, 0x0200
 85c:	90 91 01 02 	lds	r25, 0x0201
 860:	20 91 10 02 	lds	r18, 0x0210
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	82 17       	cp	r24, r18
 868:	93 07       	cpc	r25, r19
 86a:	08 f0       	brcs	.+2      	; 0x86e <main+0x2a8>
 86c:	c3 ce       	rjmp	.-634    	; 0x5f4 <main+0x2e>
 86e:	20 91 11 02 	lds	r18, 0x0211
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	82 17       	cp	r24, r18
 876:	93 07       	cpc	r25, r19
 878:	08 f0       	brcs	.+2      	; 0x87c <main+0x2b6>
 87a:	bc ce       	rjmp	.-648    	; 0x5f4 <main+0x2e>
 87c:	20 91 12 02 	lds	r18, 0x0212
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	82 17       	cp	r24, r18
 884:	93 07       	cpc	r25, r19
 886:	08 f4       	brcc	.+2      	; 0x88a <main+0x2c4>
 888:	b5 ce       	rjmp	.-662    	; 0x5f4 <main+0x2e>
 88a:	80 91 13 02 	lds	r24, 0x0213
 88e:	81 11       	cpse	r24, r1
 890:	b1 ce       	rjmp	.-670    	; 0x5f4 <main+0x2e>
 		{
			flag=1;
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	80 93 13 02 	sts	0x0213, r24
			left();
 898:	81 de       	rcall	.-766    	; 0x59c <left>
			forward();
 89a:	7d de       	rcall	.-774    	; 0x596 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 89c:	f8 01       	movw	r30, r16
 89e:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
 8a0:	e8 82       	st	Y, r14
 8a2:	a8 ce       	rjmp	.-688    	; 0x5f4 <main+0x2e>
				goto next;
			 }
		 }
		 
		 next:
		  if(Center_white_line>threshold && Left_white_line>threshold && Right_white_line>threshold && (flag==0))
 8a4:	80 91 00 02 	lds	r24, 0x0200
 8a8:	90 91 01 02 	lds	r25, 0x0201
 8ac:	23 cf       	rjmp	.-442    	; 0x6f4 <main+0x12e>
			  _delay_ms(250);
			  forward();
		  }
		

		if((Center_white_line<=threshold) && (Left_white_line>threshold && Right_white_line>threshold) && (flag==0))
 8ae:	80 91 00 02 	lds	r24, 0x0200
 8b2:	90 91 01 02 	lds	r25, 0x0201
 8b6:	49 cf       	rjmp	.-366    	; 0x74a <main+0x184>
			     /*if((Left_white_line<=threshold) && (Right_white_line<=threshold))
			     {   flag=1;
				     velocity(0,0);
			     }*/
				 
		if((Center_white_line<=threshold) && (Left_white_line<=threshold && Right_white_line>threshold) && (flag==0))
 8b8:	80 91 00 02 	lds	r24, 0x0200
 8bc:	90 91 01 02 	lds	r25, 0x0201
 8c0:	68 cf       	rjmp	.-304    	; 0x792 <main+0x1cc>
					soft_left();
					//forward();
					velocity(0,200);
				}*/
				
		if((Center_white_line<=threshold) && (Right_white_line<=threshold && Left_white_line>threshold) && (flag==0))
 8c2:	80 91 00 02 	lds	r24, 0x0200
 8c6:	90 91 01 02 	lds	r25, 0x0201
 8ca:	87 cf       	rjmp	.-242    	; 0x7da <main+0x214>
					//forward();
					velocity(200,0);
				}*/
		
		
	    if((Right_white_line<=threshold) && (Center_white_line>threshold) && (Left_white_line>threshold) && (flag==0))
 8cc:	80 91 00 02 	lds	r24, 0x0200
 8d0:	90 91 01 02 	lds	r25, 0x0201
 8d4:	a7 cf       	rjmp	.-178    	; 0x824 <main+0x25e>
			forward();
			velocity(130,50);
			
		}

       if((Right_white_line>threshold) && (Center_white_line>threshold) && (Left_white_line<=threshold) && (flag==0))
 8d6:	80 91 00 02 	lds	r24, 0x0200
 8da:	90 91 01 02 	lds	r25, 0x0201
 8de:	c7 cf       	rjmp	.-114    	; 0x86e <main+0x2a8>

000008e0 <__umulhisi3>:
 8e0:	a2 9f       	mul	r26, r18
 8e2:	b0 01       	movw	r22, r0
 8e4:	b3 9f       	mul	r27, r19
 8e6:	c0 01       	movw	r24, r0
 8e8:	a3 9f       	mul	r26, r19
 8ea:	70 0d       	add	r23, r0
 8ec:	81 1d       	adc	r24, r1
 8ee:	11 24       	eor	r1, r1
 8f0:	91 1d       	adc	r25, r1
 8f2:	b2 9f       	mul	r27, r18
 8f4:	70 0d       	add	r23, r0
 8f6:	81 1d       	adc	r24, r1
 8f8:	11 24       	eor	r1, r1
 8fa:	91 1d       	adc	r25, r1
 8fc:	08 95       	ret

000008fe <_exit>:
 8fe:	f8 94       	cli

00000900 <__stop_program>:
 900:	ff cf       	rjmp	.-2      	; 0x900 <__stop_program>
